< ------------------------------------------------------------JSP 시작하기 (Jasper란 알바생)------------------------------------------------------------>
* JSP 는 왜 쓸까?
	프로그램을 만들게되면 사용자에게 응답을 하며 결과물 돌려줌 > 웹문서
	간단하면 좋지만 보통 복잡한 형태의 html 구문을 이용해 결과물을 브라우저에게 보내줌
	서블릿에선 write함수로 한줄 한줄 한줄 다 수정해줘야함 >> 매우 노가다성
	
* Jasper의 역할
	out.write()로 감싸던 노가다성 서블릿코드를 간단히 바꿀수있게 해줌
	.jsp확장자를 붙이면 html내용들을 서블릿 출력 가능 형태로 바꿔줌

* 그럼 언제 출력할수있는 서블릿 코드 형태로 바꿔줄까?
	jsp가 요구될때(사용자가 jsp페이지를 요구할때) 바뀜
	따라서 URL매핑은 파일명 그대로 URL매핑됨 따라서 대문자보단 소문자가 좋음 (서블릿은 저장되어있는 파일명과 URL이 다르지만 JSP는 그렇지 않음)
	jasper가 add.jsp로 만드는 서블릿코드는 톰캣내부 경로에 add_jsp.java파일로 만든다.

* 서블릿과 다르게 jsp는 요청할 때마다 달라진게 있으면 알아서 다시 만들기 때문에 다시 서버를 시작할 필요가 없다.
	그리고 우리가 브라우저에서 보는 문서는 이클립스 파일이 아니라 톰캣의 홈 디렉토리로 배포해 브라우저에 띄운다.
	다만 실제 톰캣의 워크디렉토리가 아닌 이클립스가 관리하는 별도의 운영을 위한 사본을 만듦 (.metadata)

* 만약 jsp내부에 변수를 선언하고 싶었다
	int x = 3;
	int y = 4;
	>> jsp는 무조건 writer()로 붙여버린다.
	>> 코드 그대로 삽입하길 원하면 코드블럭을 붙여야함 <% 이 사이에 자바 코드 넣는다 %>	>> 서블릿을 jasper를 통해 만드는 방법






< ------------------------------------------------------------ JSP의 코드 블록 ------------------------------------------------------------>
* 출력문장 사이에 자바코드를 꽂아 넣는 몇가지 방법

* jsp 는 출력되어야 할 문장을 public void _jspService()함수에 출력할수있게 변환하고 쓰여짐 (지역변수 알고리즘) out.writer()로 감싸서
* 코드를 넣고 싶으면 <%%> 감쌈 >> 이것도 _jspService()함수에 들어감	>> 자바코드가 들어감
* y의 값은 : y에서 y의 값을 넣고 싶으면 ---> y의 값은 : <% out.print(y) %>	--- 변환----> out.write("y의 값은 : "); out.print(y);
	>> 문서내에서 특정 변수를 출력하고 싶으면 이를위한 코드블럭 존재 
	>> <%=y %> == out.print()와 같은 역할		
	(팁: write()는 문자열을 출력하기 위한 전문 함수, print()는 다양한 형태의 자료형을 출력할 수 있게하는 수많은 오버로드를 가진 메소드이다.)

* public int sum(int a, int b) { return a + b };
  > 이렇게 멤버메소드를 정의하고 싶을때는 <%%>을하면 _jspService()함수에 들어감 > 메소드안에 메소드를 정의 (자바에서는 불가능 > 구문 에러)
  > 원래 넣고싶은 위치는  public final class add_jsp {} 클래스에 넣고 싶음 
  >> <%! public int sum(int a, int b) { return a + b }; %> 이렇게 느낌표를 붙이면 멤버변수로 들어감

* page 지시자 (초기설정을 위한)
	<%@ page language="java" contentType="text/html: charset=UTF-8" pageEncoding="UTF-8" %>
	서블릿서 UTF-8로 출력하겠다 설정, 브라우저에게 알려주기 위한 내용을 직접 썼었음 (setCharacterEncoding(), setContentType())
	기존 함수를 코드블록 <%%>로 덮어서 사용하면 >> 이미출력이 지정된 뒤에 설정하고 있다라는 오류가 발생됨 >> 이런 오류로 코드블록으로 해결이 안됨
	>> 지시자를 통해 쓰면 어떤 출력을 진행하는 코드보다 앞서서 설정이 진행되므로 인코딩, 컨텐트타입 설정시 지시자를 사용해야함

* 코드블록의 종류 정리
  1. <% %> : 자바 코드를 이용하기 위해 (write로 덮어지는걸 막음), jsp서비스 함수에 옮겨짐
  2. <%=변수 %> : 문서내 특정 변수를 출력하고 싶을떄 사용 <% out.print(변수명); %>의 수고를 덜어줌
  3. <%! %> : _jspService()함수가 아닌 멤버 메소드로서 선언하고 싶을때 사용됨 add_jsp 클래스에 삽입됨
  4. <%@ $> : 페이지 지시자, 어떤 출력코드보다 먼저 인코딩을 설정하거나 컨텐트 타입 설정시 지시자를 이용해야함






< ------------------------------------------------------------ JSP의 내장객체 간단히 알아보기 ------------------------------------------------------------>
* jsp 페이지에서 int page 변수를 선언하면 : 로컬변수가 중복되었다 오류 발생
	> 코드블럭 외에 코드가 있다는걸 간과하면 안됨 jasper가 만든 서블릿은 내가 모르는 변수가 있을수 있음
	> jasper는 서비스 함수를 만들며 자신이 필요한 변수를 만들어놓음 : 그중 하나가 page
	> Jasper에 의해 마련된 변수들은 하나같이 객체를 가리키는 객체형식임 : 이런 변수들을 내장 객체라고 한다(Built in 객체)
	> 이런 변수가 있다는것을 알고 있어야하고, jsp에서 코드블럭만들때 내장객체들을 적절히 활용해서 코드를 만들 수 있어야함

* 내장객체 종류
	입출력도구: response, request 객체
	상태저장도구: applicaiton, session 객체
	페이지 내에서 세션, 어플리케이션처럼 임시로 데이터를 저장할수있는 도구 : pageContext (setAttribute, getAttribute가짐)
	>> servletContext는 전역적으로 사용한다면 pageContext는 _jspService내부에서만 쓰는 저장소
	
	config : servletConfig
	out  : 출력도구
	page  : page의 객체를 참조하는 Object형 페이지 변수


* 내장객체란 jasper가 만들어낸 서블릿 안에있는 미리 선언된 변수, 그것을 이용해 코드블럭에서 사용가능






< ------------------------------------------------------------  JSP로 만드는 Hello 서블릿 ------------------------------------------------------------>
nana.jsp 및 nana.java 참조
